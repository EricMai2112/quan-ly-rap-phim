package VIEW;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.itextpdf.layout.Document;

import CONTROL.GiaoDich_DAO;
import Components.ExportFile1;
import MODEL.GiaoDich;
import MODEL.KhachHang;
import MODEL.NhanVien;

/**
 *
 * @author 84837
 */
public class GiaoDich_GUI extends javax.swing.JPanel {
	private DefaultTableModel originalModel;
	private GiaoDich_DAO giaoDichDAO;
	private List<GiaoDich> giaoDichList;

	/**
	 * Creates new form BaoCaoCongViec_GUI
	 */
	public GiaoDich_GUI() {
		enum TrangThai {
			TAT_CA, QL001, NV001, NV002, NV003
		}
		initComponents();
		updateHeader();
		loadData();
		originalModel = (DefaultTableModel) tbDanhSachDatPhong.getModel();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		titleHoaDon = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tbDanhSachDatPhong = new javax.swing.JTable();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		txtNgayCheckIn = new com.toedter.calendar.JDateChooser();
		txtNgayCheckOut = new com.toedter.calendar.JDateChooser();
		cboTrangThai = new javax.swing.JComboBox<>();
		btnXuatFile = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		btnTimKiem = new javax.swing.JButton();
		txtTimKiem = new javax.swing.JTextField();

		setLayout(new java.awt.CardLayout());

		jPanel1.setBackground(new java.awt.Color(255, 255, 255));

		titleHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
		titleHoaDon.setText("Giao dịch");

		tbDanhSachDatPhong.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, // Bắt đầu với dữ liệu
																								// rỗng
				new String[] { "Mã giao dịch", "Tổng tiền ", "Thời gian giao dịch", "Nhân viên", "Khách hàng" }) {
			Class<?>[] types = new Class<?>[] { java.lang.String.class, java.lang.String.class, java.lang.String.class,
					java.lang.String.class, java.lang.String.class, java.lang.String.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			@Override
			public boolean isCellEditable(int row, int column) {
				return false; // Không cho phép chỉnh sửa dữ liệu trong bảng
			}
		});
		tbDanhSachDatPhong.setRowHeight(40);
		jScrollPane1.setViewportView(tbDanhSachDatPhong);

		jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel5.setText("Đến");

		jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel6.setText("Từ");

		cboTrangThai.setModel(new javax.swing.DefaultComboBoxModel<>(
				new String[] { "Tất cả", "QL001", "NV001", "NV002", "NV003", " " }));

		btnXuatFile = new RoundedPanel(30);
		btnXuatFile.setBackground(new java.awt.Color(129, 251, 184));
		btnXuatFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
		btnXuatFile.setMaximumSize(new java.awt.Dimension(100, 50));
		btnXuatFile.setPreferredSize(new java.awt.Dimension(100, 50));

		jLabel1.setBackground(new java.awt.Color(255, 255, 255));
		jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(255, 255, 255));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Export.png"))); // NOI18N
		jLabel1.setText("Xuất file");

		javax.swing.GroupLayout btnXuatFileLayout = new javax.swing.GroupLayout(btnXuatFile);
		btnXuatFile.setLayout(btnXuatFileLayout);
		btnXuatFileLayout
				.setHorizontalGroup(btnXuatFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(btnXuatFileLayout.createSequentialGroup().addContainerGap()
								.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
								.addContainerGap()));
		btnXuatFileLayout.setVerticalGroup(btnXuatFileLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(btnXuatFileLayout.createSequentialGroup().addContainerGap().addComponent(jLabel1,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));

		btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Search.png"))); // NOI18N

		txtTimKiem.setForeground(new java.awt.Color(144, 144, 144));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1)
						.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
								.addComponent(titleHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 199,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 195,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(btnTimKiem).addGap(27, 27, 27)
								.addComponent(btnXuatFile, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(28, 28, 28)
								.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(txtNgayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 128,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addComponent(txtNgayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 122,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(37, 37, 37).addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE,
										117, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(15, 15, 15)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
						.addGap(0, 10, Short.MAX_VALUE)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(titleHoaDon)
								.addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4,
														Short.MAX_VALUE)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(cboTrangThai,
																javax.swing.GroupLayout.PREFERRED_SIZE, 42,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel6).addComponent(jLabel5)
														.addComponent(txtNgayCheckIn,
																javax.swing.GroupLayout.PREFERRED_SIZE, 42,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(txtNgayCheckOut,
																javax.swing.GroupLayout.PREFERRED_SIZE, 42,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout
												.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(btnTimKiem,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(btnXuatFile,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE, 32,
																Short.MAX_VALUE)
														.addComponent(txtTimKiem))))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap()));

		add(jPanel1, "card2");
		btnXuatFile.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				ExportFile1 exporter = new ExportFile1();
				exporter.exportToPDF(tbDanhSachDatPhong);
			}
		});
		btnTimKiem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String ma = txtTimKiem.getText().trim();
				if (ma.isEmpty()) {
					JOptionPane.showMessageDialog(null, "Vui lòng nhập mã giao dịch.");
					return;
				}

				// Gọi DAO để lấy giao dịch cụ thể
				GiaoDich_DAO dao = new GiaoDich_DAO();
				GiaoDich giaoDich = dao.findGiaoDichByMa(ma); // Cần thêm phương thức này trong GiaoDich_DAO

				// Lấy model của bảng
				DefaultTableModel model = (DefaultTableModel) tbDanhSachDatPhong.getModel();
				model.setRowCount(0); // Xóa toàn bộ dòng hiện có trong bảng

				if (giaoDich != null) {
					// Nếu tìm thấy giao dịch, hiển thị chỉ dòng đó
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
					NhanVien nhanVien = giaoDich.getNhanVien();
					KhachHang khachHang = giaoDich.getKhachHang();

					String maNhanVien = nhanVien != null ? nhanVien.getMaNHanVien() : "Không xác định";
					String maKhachHang = khachHang != null ? khachHang.getMaKhachHang() : "Không xác định";
					String thoiGianStr = giaoDich.getThoiGianGiaoDich() != null
							? dateFormat.format(giaoDich.getThoiGianGiaoDich())
							: "N/A";

					Object[] row = { giaoDich.getMaGiaoDich(), giaoDich.getTongTien(), thoiGianStr, maNhanVien,
							maKhachHang };
					model.addRow(row); // Thêm dòng khớp với mã giao dịch
				} else {
					// Nếu không tìm thấy, thông báo và tải lại toàn bộ dữ liệu
					JOptionPane.showMessageDialog(null, "Không tìm thấy giao dịch " + ma + ".");
					loadData(); // Tải lại toàn bộ dữ liệu
				}
			}
		});
		txtNgayCheckIn.getDateEditor().addPropertyChangeListener("date", evt -> {
			filterByDateRange();
		});

		txtNgayCheckOut.getDateEditor().addPropertyChangeListener("date", evt -> {
			filterByDateRange();
		});
		

	}// </editor-fold>//GEN-END:initComponents

	private void updateHeader() {
		JTableHeader header = tbDanhSachDatPhong.getTableHeader();
		header.setFont(new Font("Times new Romans", Font.BOLD, 16));

	}

	private void loadGiaoDichData() {
		giaoDichList = giaoDichDAO.getAllGiaoDich();
		updateTable(giaoDichList);
	}

	private void updateTable(List<GiaoDich> giaoDichList) {
		originalModel.setRowCount(0);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

		for (GiaoDich gd : giaoDichList) {
			String maGiaoDich = gd.getMaGiaoDich();
			String tongTien = gd.getTongTien() != null ? String.valueOf(gd.getTongTien().intValue()) : "0";
			String thoiGian = gd.getThoiGianGiaoDich() != null ? dateFormat.format(gd.getThoiGianGiaoDich()) : "N/A";
			String nhanVien = (gd.getNhanVien() != null && gd.getNhanVien().getMaNHanVien() != null)
					? gd.getNhanVien().getMaNHanVien()
					: "N/A";
			String khachHang = (gd.getKhachHang() != null && gd.getKhachHang().getMaKhachHang() != null)
					? gd.getKhachHang().getMaKhachHang()
					: "N/A";

			originalModel.addRow(new Object[] { maGiaoDich, tongTien, thoiGian, nhanVien, khachHang });
		}
	}

	public void loadData() {
		GiaoDich_DAO giaoDichDAO = new GiaoDich_DAO();
		List<GiaoDich> listGiaoDich;
		try {
			listGiaoDich = giaoDichDAO.getAllGiaoDich();
		} catch (Exception e) {
			return;
		}

		DefaultTableModel model;
		try {
			model = (DefaultTableModel) tbDanhSachDatPhong.getModel();
			model.setRowCount(0); // Xóa toàn bộ dòng hiện có
		} catch (Exception e) {
			return;
		}

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

		for (GiaoDich giaoDich : listGiaoDich) {
			NhanVien nhanVien = giaoDich.getNhanVien();
			KhachHang khachHang = giaoDich.getKhachHang();

			String maNhanVien = nhanVien != null ? nhanVien.getMaNHanVien() : "Không xác định";
			String maKhachHang = khachHang != null ? khachHang.getMaKhachHang() : "Không xác định";
			String thoiGianStr = giaoDich.getThoiGianGiaoDich() != null
					? dateFormat.format(giaoDich.getThoiGianGiaoDich())
					: "N/A";

			Object[] row = { giaoDich.getMaGiaoDich(), // Mã giao dịch
					giaoDich.getTongTien(), // Tổng tiền
					thoiGianStr, // Thời gian giao dịch
					maNhanVien, // Nhân viên
					maKhachHang // Khách hàng

			};
			model.addRow(row);
		}

	}

	private void filterByDateRange() {
		java.util.Date fromDate = txtNgayCheckIn.getDate();
		java.util.Date toDate = txtNgayCheckOut.getDate();

		// If either date is not selected, reload all data
		if (fromDate == null || toDate == null) {
			loadData();
			return;
		}

		// Convert java.util.Date to Timestamp for comparison
		Timestamp fromTimestamp = new Timestamp(fromDate.getTime());
		Timestamp toTimestamp = new Timestamp(toDate.getTime());

		// Ensure "To" date is not before "From" date
		if (toTimestamp.before(fromTimestamp)) {
			JOptionPane.showMessageDialog(null, "Ngày 'Đến' phải sau ngày 'Từ'.");
			txtNgayCheckOut.setDate(null); // Reset "To" date
			loadData();
			return;
		}

		// Fetch all transactions
		GiaoDich_DAO giaoDichDAO = new GiaoDich_DAO();
		List<GiaoDich> listGiaoDich;
		try {
			listGiaoDich = giaoDichDAO.getAllGiaoDich();
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}

		// Clear the table
		DefaultTableModel model = (DefaultTableModel) tbDanhSachDatPhong.getModel();
		model.setRowCount(0);

		// Filter transactions within the date range
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		for (GiaoDich giaoDich : listGiaoDich) {
			java.util.Date thoiGian = giaoDich.getThoiGianGiaoDich();
			if (thoiGian != null && !thoiGian.before(fromTimestamp) && !thoiGian.after(toTimestamp)) {
				NhanVien nhanVien = giaoDich.getNhanVien();
				KhachHang khachHang = giaoDich.getKhachHang();

				String maNhanVien = nhanVien != null ? nhanVien.getMaNHanVien() : "Không xác định";
				String maKhachHang = khachHang != null ? khachHang.getMaKhachHang() : "Không xác định";
				String thoiGianStr = dateFormat.format(thoiGian);

				Object[] row = { giaoDich.getMaGiaoDich(), giaoDich.getTongTien(), thoiGianStr, maNhanVien,
						maKhachHang };
				model.addRow(row);
			}
		}

		if (model.getRowCount() == 0) {
			JOptionPane.showMessageDialog(null, "Không có giao dịch nào trong khoảng thời gian này.");
		}
	}

	

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnTimKiem;
	private javax.swing.JPanel btnXuatFile;
	private javax.swing.JComboBox<String> cboTrangThai;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable tbDanhSachDatPhong;
	private javax.swing.JLabel titleHoaDon;
	private com.toedter.calendar.JDateChooser txtNgayCheckIn;
	private com.toedter.calendar.JDateChooser txtNgayCheckOut;
	private javax.swing.JTextField txtTimKiem;
	// End of variables declaration//GEN-END:variables
}
