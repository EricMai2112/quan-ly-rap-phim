/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VIEW;

import javax.swing.text.*;
import javax.swing.text.DocumentFilter.FilterBypass;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.toedter.calendar.JDateChooser;

import CONTROL.PhongChieu_DAO;
import MODEL.PhongChieu;




/**
 *
 * @author 8483
 */
public class PhongChieu_GUI extends javax.swing.JPanel {
	/**
	 * Creates new form NhanVien_GUI
	 */
	public PhongChieu_GUI() {
		initComponents();
		updateHeader();
		loadData();            
	    addEventHandlers();

	}
	
	// import control.PhongChieu_DAO; ở đầu file
	private final PhongChieu_DAO phongChieuDAO = new PhongChieu_DAO();


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titlePhongChieu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNhanVien = new javax.swing.JTable();
        btnXoa = new RoundedPanel(20);
        lbXoa = new javax.swing.JLabel();
        btnCapNhat = new RoundedPanel(20);
        lbCapNhat = new javax.swing.JLabel();
        btnThemPhongChieu = new RoundedPanel(20);
        lbThemPhongChieu = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        titlePhongChieu.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titlePhongChieu.setText("Danh sách phòng chiếu");

        tbNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Mã phòng chiếu", "Tên phòng chiếu", "Số lượng người"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbNhanVien.setRowHeight(40);
        jScrollPane1.setViewportView(tbNhanVien);

        btnXoa.setBackground(new java.awt.Color(255, 0, 0));
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lbXoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbXoa.setForeground(new java.awt.Color(255, 255, 255));
        lbXoa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbXoa.setText("Xóa");

        javax.swing.GroupLayout btnXoaLayout = new javax.swing.GroupLayout(btnXoa);
        btnXoa.setLayout(btnXoaLayout);
        btnXoaLayout.setHorizontalGroup(
            btnXoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnXoaLayout.createSequentialGroup()
                .addComponent(lbXoa, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnXoaLayout.setVerticalGroup(
            btnXoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnXoaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbXoa)
                .addContainerGap())
        );

        btnCapNhat.setBackground(new java.awt.Color(245, 109, 40));
        btnCapNhat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lbCapNhat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbCapNhat.setForeground(new java.awt.Color(255, 255, 255));
        lbCapNhat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCapNhat.setText("Cập nhật");

        javax.swing.GroupLayout btnCapNhatLayout = new javax.swing.GroupLayout(btnCapNhat);
        btnCapNhat.setLayout(btnCapNhatLayout);
        btnCapNhatLayout.setHorizontalGroup(
            btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbCapNhat, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
        );
        btnCapNhatLayout.setVerticalGroup(
            btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnCapNhatLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbCapNhat)
                .addContainerGap())
        );

        btnThemPhongChieu.setBackground(new java.awt.Color(25, 159, 254));
        btnThemPhongChieu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lbThemPhongChieu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbThemPhongChieu.setForeground(new java.awt.Color(255, 255, 255));
        lbThemPhongChieu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThemPhongChieu.setText("Thêm phòng");

        javax.swing.GroupLayout btnThemPhongChieuLayout = new javax.swing.GroupLayout(btnThemPhongChieu);
        btnThemPhongChieu.setLayout(btnThemPhongChieuLayout);
        btnThemPhongChieuLayout.setHorizontalGroup(
            btnThemPhongChieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnThemPhongChieuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbThemPhongChieu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnThemPhongChieuLayout.setVerticalGroup(
            btnThemPhongChieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnThemPhongChieuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbThemPhongChieu)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titlePhongChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnThemPhongChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(titlePhongChieu)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemPhongChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

	/** Khởi tạo model cho JTable */
	private void initTableModel() {
	    DefaultTableModel model = new DefaultTableModel(
	        new Object[][] {},
	        new String[] { "Mã phòng", "Tên phòng", "Số lượng người" }
	    ) {
	        Class<?>[] types = new Class[] { String.class, String.class, Integer.class };
	        @Override
	        public Class<?> getColumnClass(int columnIndex) {
	            return types[columnIndex];
	        }
	        @Override
	        public boolean isCellEditable(int row, int column) {
	            return false; // Không cho sửa trực tiếp trong bảng
	        }
	    };
	    tbNhanVien.setModel(model);
	    tbNhanVien.setRowHeight(40);
	}
    
	/** Load lại toàn bộ dữ liệu từ DAO vào JTable */
	private void loadData() {
	    DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
	    model.setRowCount(0); // Xoá hết dòng cũ
	    List<PhongChieu> list = PhongChieu_DAO.getAllPhongChieu();
	    for (PhongChieu pc : list) {
	        model.addRow(new Object[]{
	            pc.getMaPhong(),
	            pc.getTenPhong(),
	            pc.getSoLuongNguoi()
	        });
	    }
	}

    
	/** Gắn sự kiện cho 3 nút Thêm, Xóa, Cập nhật */
	private void addEventHandlers() {
	    // Thêm phòng
		btnThemPhongChieu.addMouseListener(new MouseAdapter() {
		    public void mouseClicked(MouseEvent e) {
		        showAddDialog();
		    }
		});


	    // Xóa phòng
	    btnXoa.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseClicked(MouseEvent e) {
	            int row = tbNhanVien.getSelectedRow();
	            if (row < 0) {
	                JOptionPane.showMessageDialog(PhongChieu_GUI.this,
	                    "Vui lòng chọn phòng để xóa.", "Thông báo",
	                    JOptionPane.WARNING_MESSAGE);
	                return;
	            }
	            String ma = tbNhanVien.getValueAt(row, 0).toString();
	            int confirm = JOptionPane.showConfirmDialog(PhongChieu_GUI.this,
	                "Bạn có chắc muốn xóa phòng " + ma + "?", "Xác nhận",
	                JOptionPane.YES_NO_OPTION);
	            if (confirm == JOptionPane.YES_OPTION) {
	                if (PhongChieu_DAO.deletePhongChieu(ma)) {
	                    JOptionPane.showMessageDialog(PhongChieu_GUI.this,
	                        "Xóa thành công.", "Thông báo",
	                        JOptionPane.INFORMATION_MESSAGE);
	                    loadData(); // Load lại bảng
	                } else {
	                    JOptionPane.showMessageDialog(PhongChieu_GUI.this,
	                        "Xóa thất bại.", "Lỗi",
	                        JOptionPane.ERROR_MESSAGE);
	                }
	            }
	        }
	    });

	    // Cập nhật phòng
	    btnCapNhat.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseClicked(MouseEvent e) {
	            int row = tbNhanVien.getSelectedRow();
	            if (row < 0) {
	                JOptionPane.showMessageDialog(PhongChieu_GUI.this,
	                    "Vui lòng chọn phòng để cập nhật.", "Thông báo",
	                    JOptionPane.WARNING_MESSAGE);
	                return;
	            }
	            String ma = tbNhanVien.getValueAt(row, 0).toString();
	            String ten = tbNhanVien.getValueAt(row, 1).toString();
	            String soStr = tbNhanVien.getValueAt(row, 2).toString();
	            showUpdateDialog(ma, ten, soStr);
	        }
	    });
	}

	/** Hiển thị dialog thêm mới phòng chiếu */
	private void showAddDialog() {
	    JTextField txtMa = new JTextField();
	    JTextField txtTen = new JTextField();
	    JTextField txtSo = new JTextField();

	    ((AbstractDocument) txtSo.getDocument()).setDocumentFilter(new NumericDocumentFilter());

	    Object[] fields = {
	        "Mã phòng:", txtMa,
	        "Tên phòng:", txtTen,
	        "Số lượng người:", txtSo
	    };

	    int option = JOptionPane.showConfirmDialog(
	        this, fields, "Thêm phòng chiếu", JOptionPane.OK_CANCEL_OPTION
	    );
	    if (option == JOptionPane.OK_OPTION) {
	        String ma = txtMa.getText().trim();
	        String ten = txtTen.getText().trim();
	        String so = txtSo.getText().trim();

	        if (ma.isEmpty() || ten.isEmpty() || so.isEmpty()) {
	            JOptionPane.showMessageDialog(this,
	                "Không được để trống.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	            return;
	        }

	        PhongChieu pc = new PhongChieu(ma, ten, Integer.parseInt(so));
	        if (PhongChieu_DAO.addPhongChieu(pc)) {
	            JOptionPane.showMessageDialog(this,
	                "Thêm thành công.", "Thông báo",
	                JOptionPane.INFORMATION_MESSAGE);
	            loadData(); // Load lại bảng
	        } else {
	            JOptionPane.showMessageDialog(this,
	                "Thêm thất bại. Có thể mã đã tồn tại.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	        }
	    }
	}

	/** Hiển thị dialog cập nhật phòng chiếu */
	private void showUpdateDialog(String ma, String tenCu, String soCu) {
	    JTextField txtTen = new JTextField(tenCu);
	    JTextField txtSo = new JTextField(soCu);
	    ((AbstractDocument) txtSo.getDocument()).setDocumentFilter(new NumericDocumentFilter());

	    Object[] fields = {
	        "Tên phòng:", txtTen,
	        "Số lượng người:", txtSo
	    };

	    int option = JOptionPane.showConfirmDialog(
	        this, fields, "Cập nhật phòng chiếu", JOptionPane.OK_CANCEL_OPTION
	    );
	    if (option == JOptionPane.OK_OPTION) {
	        String tenMoi = txtTen.getText().trim();
	        String soMoi = txtSo.getText().trim();

	        if (tenMoi.isEmpty() || soMoi.isEmpty()) {
	            JOptionPane.showMessageDialog(this,
	                "Không được để trống.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	            return;
	        }

	        PhongChieu pc = new PhongChieu(ma, tenMoi, Integer.parseInt(soMoi));
	        if (PhongChieu_DAO.updatePhongChieu(pc)) {
	            JOptionPane.showMessageDialog(this,
	                "Cập nhật thành công.", "Thông báo",
	                JOptionPane.INFORMATION_MESSAGE);
	            loadData(); // Load lại bảng
	        } else {
	            JOptionPane.showMessageDialog(this,
	                "Cập nhật thất bại.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	        }
	    }
	}
	
	private void updateHeader() {
		JTableHeader header = tbNhanVien.getTableHeader();
		header.setFont(new Font("Times new Romans", Font.BOLD, 16));
	}
	
	
	/** Chỉ cho phép nhập số */
    private static class NumericDocumentFilter extends DocumentFilter {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)
                throws javax.swing.text.BadLocationException {
            if (string != null && string.matches("\\d*")) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                throws javax.swing.text.BadLocationException {
            if (text != null && text.matches("\\d*")) {
                super.replace(fb, offset, length, text, attrs);
            }
        }
    }



	// Hàm kiểm tra tính hợp lệ của đầu vào
	private boolean isInputValid(String tenNhanVien, String phai, Date ngaySinh, String cccd, String soDienThoai) {
		if (tenNhanVien.isEmpty() || phai.isEmpty() || ngaySinh == null || cccd.isEmpty() || soDienThoai.isEmpty()) {
			return false;
		}
		if (!soDienThoai.matches("\\d{10,11}")) { // Kiểm tra số điện thoại có đúng định dạng không (10-11 số)
			JOptionPane.showMessageDialog(null, "Số điện thoại phải có từ 10 đến 11 chữ số.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return false;
		}
		if (!cccd.matches("\\d{12}")) { // Kiểm tra CCCD có đúng định dạng 12 chữ số không
			JOptionPane.showMessageDialog(null, "Số CCCD phải có đúng 12 chữ số.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return false;
		}
		return true;
	}

	private boolean isInputValid(String tenNhanVien, String phai, Date ngaySinh, String soDienThoai) {
		return !tenNhanVien.isEmpty() && !phai.isEmpty() && ngaySinh != null && !soDienThoai.isEmpty();
	}

	private java.sql.Date parseDate(String dateString) throws java.text.ParseException {
		java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy");
		Date date = dateFormat.parse(dateString);
		return new java.sql.Date(date.getTime());
	}

	private javax.swing.JTextField createTextField(String text, boolean editable) {
		javax.swing.JTextField textField = new javax.swing.JTextField(text, 20);
		textField.setEditable(editable);
		return textField;
	}


	private void addComponent(javax.swing.JPanel panel, java.awt.GridBagConstraints gbc, int gridX, int gridY,
			String labelText, javax.swing.JComponent component) {
		gbc.gridx = gridX;
		gbc.gridy = gridY;
		panel.add(new javax.swing.JLabel(labelText), gbc);
		gbc.gridx = gridX + 1;
		panel.add(component, gbc);
	}

	private javax.swing.JPanel createButtonPanel(javax.swing.JButton btnCancel, javax.swing.JButton btnSave) {
		javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
		buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);
		return buttonPanel;
	}



	// Helper method to add components in formPanel
	private void addFormRow(JPanel panel, GridBagConstraints gbc, int row, String labelText, Component component) {
		gbc.gridx = 0;
		gbc.gridy = row;
		panel.add(new JLabel(labelText), gbc);

		gbc.gridx = 1;
		panel.add(component, gbc);
	}

	private boolean saveTaiKhoanData(JDialog dialog, JTextField txtTenDangNhap, JTextField txtMatKhau,
			JTextField txtEmail) {
		String tenDangNhap = txtTenDangNhap.getText().trim();
		String matKhau = txtMatKhau.getText().trim();
		String email = txtEmail.getText().trim();

// Kiểm tra tên đăng nhập
		if (tenDangNhap.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Tên đăng nhập không được để trống. Vui lòng nhập tên đăng nhập!",
					"Lỗi", JOptionPane.ERROR_MESSAGE);
			txtTenDangNhap.requestFocus();
			return false;
		}

		if (tenDangNhap.length() < 5) {
			JOptionPane.showMessageDialog(dialog, "Tên đăng nhập phải có ít nhất 5 ký tự!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtTenDangNhap.requestFocus();
			return false;
		}

// Kiểm tra mật khẩu
		if (matKhau.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Mật khẩu không được để trống. Vui lòng nhập mật khẩu!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtMatKhau.requestFocus();
			return false;
		}

		if (matKhau.length() < 6) {
			JOptionPane.showMessageDialog(dialog, "Mật khẩu phải có ít nhất 6 ký tự để đảm bảo bảo mật!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtMatKhau.requestFocus();
			return false;
		}

// Kiểm tra email
		if (email.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Email không được để trống. Vui lòng nhập email!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtEmail.requestFocus();
			return false;
		}

// Chấp nhận nhiều nhà cung cấp email, không giới hạn chỉ Gmail
		String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
		if (!email.matches(emailPattern)) {
			JOptionPane.showMessageDialog(dialog, "Email không hợp lệ. Vui lòng nhập email đúng định dạng!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtEmail.requestFocus();
			return false;
		}

// Nếu tất cả điều kiện hợp lệ, trả về true
		JOptionPane.showMessageDialog(dialog, "Thông tin tài khoản hợp lệ và đã được lưu thành công!", "Thành công",
				JOptionPane.INFORMATION_MESSAGE);
		return true;
	}
	
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnCapNhat;
    private javax.swing.JPanel btnThemPhongChieu;
    private javax.swing.JPanel btnXoa;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCapNhat;
    private javax.swing.JLabel lbThemPhongChieu;
    private javax.swing.JLabel lbXoa;
    private javax.swing.JTable tbNhanVien;
    private javax.swing.JLabel titlePhongChieu;
    // End of variables declaration//GEN-END:variables
}
